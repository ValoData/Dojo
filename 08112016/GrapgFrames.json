{
  "paragraphs": [
    {
      "text": "%dep\nz.reset() \n\nz.load(\"/home/ulrich/spark-data/packages/graphframes/target/scala-2.11/graphframes-assembly-0.2.0-spark2.0.jar\")",
      "dateUpdated": "Nov 8, 2016 5:28:26 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1478612863464_783535482",
      "id": "20161108-134743_491693545",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "DepInterpreter(%dep) deprecated. Remove dependencies and repositories through GUI interpreter menu instead.\nDepInterpreter(%dep) deprecated. Load dependency through GUI interpreter menu instead.\nres0: org.apache.zeppelin.dep.Dependency \u003d org.apache.zeppelin.dep.Dependency@6f204b15\n"
      },
      "dateCreated": "Nov 8, 2016 1:47:43 AM",
      "dateStarted": "Nov 8, 2016 5:28:26 AM",
      "dateFinished": "Nov 8, 2016 5:28:34 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import org.graphframes._",
      "dateUpdated": "Nov 8, 2016 5:28:26 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1478607446389_1710411275",
      "id": "20161108-121726_591083162",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "\nimport org.graphframes._\n"
      },
      "dateCreated": "Nov 8, 2016 12:17:26 PM",
      "dateStarted": "Nov 8, 2016 5:28:29 AM",
      "dateFinished": "Nov 8, 2016 5:28:41 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// Create a Vertex DataFrame with unique ID column \"id\"\nval v \u003d sqlContext.createDataFrame(List(\n  (\"a\", \"Alice\", 34),\n  (\"b\", \"Bob\", 36),\n  (\"c\", \"Charlie\", 30)\n)).toDF(\"id\", \"name\", \"age\")\n\n\n// Create an Edge DataFrame with \"src\" and \"dst\" columns\nval e \u003d sqlContext.createDataFrame(List(\n  (\"a\", \"b\", \"friend\"),\n  (\"b\", \"c\", \"follow\"),\n  (\"c\", \"b\", \"follow\")\n)).toDF(\"src\", \"dst\", \"relationship\")\n\n// Create a GraphFrame\n\nval g \u003d GraphFrame(v, e)",
      "dateUpdated": "Nov 8, 2016 5:28:26 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1478614900194_-1193809541",
      "id": "20161108-142140_67157463",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "\nv: org.apache.spark.sql.DataFrame \u003d [id: string, name: string ... 1 more field]\n\ne: org.apache.spark.sql.DataFrame \u003d [src: string, dst: string ... 1 more field]\n\ng: org.graphframes.GraphFrame \u003d GraphFrame(v:[id: string, name: string ... 1 more field], e:[src: string, dst: string ... 1 more field])\n"
      },
      "dateCreated": "Nov 8, 2016 2:21:40 AM",
      "dateStarted": "Nov 8, 2016 5:28:35 AM",
      "dateFinished": "Nov 8, 2016 5:28:48 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Basic graph and DataFrame queries",
      "text": "import org.apache.spark.sql._\nimport org.apache.spark.sql.types._\n\n// Display the vertex and edge DataFrames\ng.vertices.show()\n\ng.edges.show()\n\n// Get a DataFrame with columns \"id\" and \"inDeg\" (in-degree)\nval vertexInDegree : DataFrame \u003d g.inDegrees\n\n// Find the youngest user\u0027s age in the graph.\n// This queries the vertex DataFrame.\ng.vertices.groupBy().min(\"age\").show()\n\n// Count the number of \"follows\" in the graph.\n// This queries the edge DataFrame.\nval numFollows \u003d g.edges.filter(\"relationship \u003d \u0027follow\u0027\").count()",
      "dateUpdated": "Nov 8, 2016 5:28:27 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true,
        "tableHide": false,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1478606364955_-1427576684",
      "id": "20161108-115924_1205440179",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "\nimport org.apache.spark.sql._\n\nimport org.apache.spark.sql.types._\n+---+-------+---+\n| id|   name|age|\n+---+-------+---+\n|  a|  Alice| 34|\n|  b|    Bob| 36|\n|  c|Charlie| 30|\n+---+-------+---+\n\n+---+---+------------+\n|src|dst|relationship|\n+---+---+------------+\n|  a|  b|      friend|\n|  b|  c|      follow|\n|  c|  b|      follow|\n+---+---+------------+\n\n\nvertexInDegree: org.apache.spark.sql.DataFrame \u003d [id: string, inDegree: int]\n+--------+\n|min(age)|\n+--------+\n|      30|\n+--------+\n\n\nnumFollows: Long \u003d 2\n"
      },
      "dateCreated": "Nov 8, 2016 11:59:24 AM",
      "dateStarted": "Nov 8, 2016 5:28:42 AM",
      "dateFinished": "Nov 8, 2016 5:28:53 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Motif finding",
      "text": "// Search for pairs of vertices with edges in both directions between them.\nval motifs: DataFrame \u003d g.find(\"(a)-[e]-\u003e(b); (b)-[e2]-\u003e(a)\")\nmotifs.show()\n\n// More complex queries can be expressed by applying filters.\nmotifs.filter(\"b.age \u003e 30\").show()",
      "dateUpdated": "Nov 8, 2016 5:28:27 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1478625682038_1911143537",
      "id": "20161108-172122_1238862042",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "\nmotifs: org.apache.spark.sql.DataFrame \u003d [a: struct\u003cid: string, name: string ... 1 more field\u003e, e: struct\u003csrc: string, dst: string ... 1 more field\u003e ... 2 more fields]\n+--------------+------------+--------------+------------+\n|             a|           e|             b|          e2|\n+--------------+------------+--------------+------------+\n|    [b,Bob,36]|[b,c,follow]|[c,Charlie,30]|[c,b,follow]|\n|[c,Charlie,30]|[c,b,follow]|    [b,Bob,36]|[b,c,follow]|\n+--------------+------------+--------------+------------+\n\n+--------------+------------+----------+------------+\n|             a|           e|         b|          e2|\n+--------------+------------+----------+------------+\n|[c,Charlie,30]|[c,b,follow]|[b,Bob,36]|[b,c,follow]|\n+--------------+------------+----------+------------+\n\n"
      },
      "dateCreated": "Nov 8, 2016 5:21:22 AM",
      "dateStarted": "Nov 8, 2016 5:28:49 AM",
      "dateFinished": "Nov 8, 2016 5:28:55 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Subgraph",
      "text": "// Select subgraph of users older than 30, and edges of type \"friend\"\nval v2 \u003d g.vertices.filter(\"age \u003e 30\")\nval e2 \u003d g.edges.filter(\"relationship \u003d \u0027friend\u0027\")\nval g2 \u003d GraphFrame(v2, e2)",
      "dateUpdated": "Nov 8, 2016 5:28:27 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "title": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1478617889222_1907558277",
      "id": "20161108-151129_357508674",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "\nv2: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [id: string, name: string ... 1 more field]\n\ne2: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [src: string, dst: string ... 1 more field]\n\ng2: org.graphframes.GraphFrame \u003d GraphFrame(v:[id: string, name: string ... 1 more field], e:[src: string, dst: string ... 1 more field])\n"
      },
      "dateCreated": "Nov 8, 2016 3:11:29 AM",
      "dateStarted": "Nov 8, 2016 5:28:53 AM",
      "dateFinished": "Nov 8, 2016 5:28:56 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Graph algorithms",
      "text": "\n//connected components\n\nval result \u003d g.connectedComponents.run()\nresult.select(\"id\", \"component\").orderBy(\"component\").show()\n\n//Label propagation\n\nval result \u003d g.labelPropagation.maxIter(5).run()\nresult.select(\"id\", \"label\").show()\n\n//PageRank\n\n// Run PageRank for a fixed number of iterations.\nval results2 \u003d g.pageRank.resetProbability(0.15).maxIter(10).run()\n\n// Run PageRank personalized for vertex \"a\"\nval results3 \u003d g.pageRank.resetProbability(0.15).maxIter(10).sourceId(\"a\").run()",
      "dateUpdated": "Nov 8, 2016 5:56:28 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1478619158430_-1541339086",
      "id": "20161108-153238_832459123",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "\n\n\n\u003cconsole\u003e:36: error: not found: value g\n       val result \u003d g.connectedComponents.run()\n                    ^\n"
      },
      "dateCreated": "Nov 8, 2016 3:32:38 AM",
      "dateStarted": "Nov 8, 2016 5:56:28 PM",
      "dateFinished": "Nov 8, 2016 5:56:28 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Aggegate messages",
      "text": "// We will use AggregateMessages utilities later, so name it \"AM\" for short.\nval AM \u003d AggregateMessages\n\n// For each user, sum the ages of the adjacent users.\nval msgToSrc \u003d AM.dst(\"age\")\nval msgToDst \u003d AM.src(\"age\")\nval agg \u003d g.aggregateMessages\n  .sendToSrc(msgToSrc)  // send destination user\u0027s age to source\n  .sendToDst(msgToDst)  // send source user\u0027s age to destination\n  .agg(sum(AM.msg).as(\"summedAges\"))  // sum up ages, stored in AM.msg column\nagg.show()\n",
      "dateUpdated": "Nov 8, 2016 5:28:27 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1478621395650_126181784",
      "id": "20161108-160955_1781041330",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "\n\n\n\u003cconsole\u003e:35: error: not found: value AggregateMessages\n       val AM \u003d AggregateMessages\n                ^\n"
      },
      "dateCreated": "Nov 8, 2016 4:09:55 AM",
      "dateStarted": "Nov 8, 2016 5:28:56 AM",
      "dateFinished": "Nov 8, 2016 5:28:57 AM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "",
      "dateUpdated": "Nov 8, 2016 5:28:27 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1478625102808_692587931",
      "id": "20161108-171142_1611645066",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Nov 8, 2016 5:11:42 AM",
      "dateStarted": "Nov 8, 2016 5:28:57 AM",
      "dateFinished": "Nov 8, 2016 5:28:57 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Tutorials/GraphFrames",
  "id": "2C3KDY6ZG",
  "angularObjects": {
    "2C3WS5VQ7:shared_process": [],
    "2C24KTPEA:shared_process": [],
    "2C3ZYE3U7:shared_process": [],
    "2BZ4T8VBZ:shared_process": [],
    "2C1PJ9PF2:shared_process": [],
    "2C2U52K53:shared_process": [],
    "2C1363KDF:shared_process": [],
    "2BZSB2NC6:shared_process": [],
    "2C3D2JN84:shared_process": [],
    "2C1TJ9FN1:shared_process": [],
    "2C16DTGE2:shared_process": [],
    "2C17V66MQ:shared_process": [],
    "2C1EBZ8ER:shared_process": [],
    "2C1KT4B72:shared_process": [],
    "2C14V1NQU:shared_process": [],
    "2C3FJRU53:shared_process": [],
    "2C3TNANC8:shared_process": [],
    "2C1JBSM61:shared_process": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}
